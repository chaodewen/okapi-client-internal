/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package okapi.gen;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)", date = "2015-4-29")
public class InvokeService {

  public interface Iface {

    public Response InvokeAPI(String api_path, String method, Map<String,String> arg, Map<String,String> headers, ByteBuffer body) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void InvokeAPI(String api_path, String method, Map<String,String> arg, Map<String,String> headers, ByteBuffer body, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public Response InvokeAPI(String api_path, String method, Map<String,String> arg, Map<String,String> headers, ByteBuffer body) throws org.apache.thrift.TException
    {
      send_InvokeAPI(api_path, method, arg, headers, body);
      return recv_InvokeAPI();
    }

    public void send_InvokeAPI(String api_path, String method, Map<String,String> arg, Map<String,String> headers, ByteBuffer body) throws org.apache.thrift.TException
    {
      InvokeAPI_args args = new InvokeAPI_args();
      args.setApi_path(api_path);
      args.setMethod(method);
      args.setArg(arg);
      args.setHeaders(headers);
      args.setBody(body);
      sendBase("InvokeAPI", args);
    }

    public Response recv_InvokeAPI() throws org.apache.thrift.TException
    {
      InvokeAPI_result result = new InvokeAPI_result();
      receiveBase(result, "InvokeAPI");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "InvokeAPI failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void InvokeAPI(String api_path, String method, Map<String,String> arg, Map<String,String> headers, ByteBuffer body, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      InvokeAPI_call method_call = new InvokeAPI_call(api_path, method, arg, headers, body, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class InvokeAPI_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String api_path;
      private String method;
      private Map<String,String> arg;
      private Map<String,String> headers;
      private ByteBuffer body;
      public InvokeAPI_call(String api_path, String method, Map<String,String> arg, Map<String,String> headers, ByteBuffer body, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.api_path = api_path;
        this.method = method;
        this.arg = arg;
        this.headers = headers;
        this.body = body;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("InvokeAPI", org.apache.thrift.protocol.TMessageType.CALL, 0));
        InvokeAPI_args args = new InvokeAPI_args();
        args.setApi_path(api_path);
        args.setMethod(method);
        args.setArg(arg);
        args.setHeaders(headers);
        args.setBody(body);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Response getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_InvokeAPI();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("InvokeAPI", new InvokeAPI());
      return processMap;
    }

    public static class InvokeAPI<I extends Iface> extends org.apache.thrift.ProcessFunction<I, InvokeAPI_args> {
      public InvokeAPI() {
        super("InvokeAPI");
      }

      public InvokeAPI_args getEmptyArgsInstance() {
        return new InvokeAPI_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public InvokeAPI_result getResult(I iface, InvokeAPI_args args) throws org.apache.thrift.TException {
        InvokeAPI_result result = new InvokeAPI_result();
        result.success = iface.InvokeAPI(args.api_path, args.method, args.arg, args.headers, args.body);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("InvokeAPI", new InvokeAPI());
      return processMap;
    }

    public static class InvokeAPI<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, InvokeAPI_args, Response> {
      public InvokeAPI() {
        super("InvokeAPI");
      }

      public InvokeAPI_args getEmptyArgsInstance() {
        return new InvokeAPI_args();
      }

      public AsyncMethodCallback<Response> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Response>() { 
          public void onComplete(Response o) {
            InvokeAPI_result result = new InvokeAPI_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            InvokeAPI_result result = new InvokeAPI_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, InvokeAPI_args args, org.apache.thrift.async.AsyncMethodCallback<Response> resultHandler) throws TException {
        iface.InvokeAPI(args.api_path, args.method, args.arg, args.headers, args.body,resultHandler);
      }
    }

  }

  public static class InvokeAPI_args implements org.apache.thrift.TBase<InvokeAPI_args, InvokeAPI_args._Fields>, java.io.Serializable, Cloneable, Comparable<InvokeAPI_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("InvokeAPI_args");

    private static final org.apache.thrift.protocol.TField API_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("api_path", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField METHOD_FIELD_DESC = new org.apache.thrift.protocol.TField("method", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField ARG_FIELD_DESC = new org.apache.thrift.protocol.TField("arg", org.apache.thrift.protocol.TType.MAP, (short)3);
    private static final org.apache.thrift.protocol.TField HEADERS_FIELD_DESC = new org.apache.thrift.protocol.TField("headers", org.apache.thrift.protocol.TType.MAP, (short)4);
    private static final org.apache.thrift.protocol.TField BODY_FIELD_DESC = new org.apache.thrift.protocol.TField("body", org.apache.thrift.protocol.TType.STRING, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new InvokeAPI_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new InvokeAPI_argsTupleSchemeFactory());
    }

    public String api_path; // required
    public String method; // required
    public Map<String,String> arg; // required
    public Map<String,String> headers; // required
    public ByteBuffer body; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      API_PATH((short)1, "api_path"),
      METHOD((short)2, "method"),
      ARG((short)3, "arg"),
      HEADERS((short)4, "headers"),
      BODY((short)5, "body");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // API_PATH
            return API_PATH;
          case 2: // METHOD
            return METHOD;
          case 3: // ARG
            return ARG;
          case 4: // HEADERS
            return HEADERS;
          case 5: // BODY
            return BODY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.API_PATH, new org.apache.thrift.meta_data.FieldMetaData("api_path", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.METHOD, new org.apache.thrift.meta_data.FieldMetaData("method", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ARG, new org.apache.thrift.meta_data.FieldMetaData("arg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.HEADERS, new org.apache.thrift.meta_data.FieldMetaData("headers", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.BODY, new org.apache.thrift.meta_data.FieldMetaData("body", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(InvokeAPI_args.class, metaDataMap);
    }

    public InvokeAPI_args() {
    }

    public InvokeAPI_args(
      String api_path,
      String method,
      Map<String,String> arg,
      Map<String,String> headers,
      ByteBuffer body)
    {
      this();
      this.api_path = api_path;
      this.method = method;
      this.arg = arg;
      this.headers = headers;
      this.body = org.apache.thrift.TBaseHelper.copyBinary(body);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public InvokeAPI_args(InvokeAPI_args other) {
      if (other.isSetApi_path()) {
        this.api_path = other.api_path;
      }
      if (other.isSetMethod()) {
        this.method = other.method;
      }
      if (other.isSetArg()) {
        Map<String,String> __this__arg = new HashMap<String,String>(other.arg);
        this.arg = __this__arg;
      }
      if (other.isSetHeaders()) {
        Map<String,String> __this__headers = new HashMap<String,String>(other.headers);
        this.headers = __this__headers;
      }
      if (other.isSetBody()) {
        this.body = org.apache.thrift.TBaseHelper.copyBinary(other.body);
      }
    }

    public InvokeAPI_args deepCopy() {
      return new InvokeAPI_args(this);
    }

    @Override
    public void clear() {
      this.api_path = null;
      this.method = null;
      this.arg = null;
      this.headers = null;
      this.body = null;
    }

    public String getApi_path() {
      return this.api_path;
    }

    public InvokeAPI_args setApi_path(String api_path) {
      this.api_path = api_path;
      return this;
    }

    public void unsetApi_path() {
      this.api_path = null;
    }

    /** Returns true if field api_path is set (has been assigned a value) and false otherwise */
    public boolean isSetApi_path() {
      return this.api_path != null;
    }

    public void setApi_pathIsSet(boolean value) {
      if (!value) {
        this.api_path = null;
      }
    }

    public String getMethod() {
      return this.method;
    }

    public InvokeAPI_args setMethod(String method) {
      this.method = method;
      return this;
    }

    public void unsetMethod() {
      this.method = null;
    }

    /** Returns true if field method is set (has been assigned a value) and false otherwise */
    public boolean isSetMethod() {
      return this.method != null;
    }

    public void setMethodIsSet(boolean value) {
      if (!value) {
        this.method = null;
      }
    }

    public int getArgSize() {
      return (this.arg == null) ? 0 : this.arg.size();
    }

    public void putToArg(String key, String val) {
      if (this.arg == null) {
        this.arg = new HashMap<String,String>();
      }
      this.arg.put(key, val);
    }

    public Map<String,String> getArg() {
      return this.arg;
    }

    public InvokeAPI_args setArg(Map<String,String> arg) {
      this.arg = arg;
      return this;
    }

    public void unsetArg() {
      this.arg = null;
    }

    /** Returns true if field arg is set (has been assigned a value) and false otherwise */
    public boolean isSetArg() {
      return this.arg != null;
    }

    public void setArgIsSet(boolean value) {
      if (!value) {
        this.arg = null;
      }
    }

    public int getHeadersSize() {
      return (this.headers == null) ? 0 : this.headers.size();
    }

    public void putToHeaders(String key, String val) {
      if (this.headers == null) {
        this.headers = new HashMap<String,String>();
      }
      this.headers.put(key, val);
    }

    public Map<String,String> getHeaders() {
      return this.headers;
    }

    public InvokeAPI_args setHeaders(Map<String,String> headers) {
      this.headers = headers;
      return this;
    }

    public void unsetHeaders() {
      this.headers = null;
    }

    /** Returns true if field headers is set (has been assigned a value) and false otherwise */
    public boolean isSetHeaders() {
      return this.headers != null;
    }

    public void setHeadersIsSet(boolean value) {
      if (!value) {
        this.headers = null;
      }
    }

    public byte[] getBody() {
      setBody(org.apache.thrift.TBaseHelper.rightSize(body));
      return body == null ? null : body.array();
    }

    public ByteBuffer bufferForBody() {
      return org.apache.thrift.TBaseHelper.copyBinary(body);
    }

    public InvokeAPI_args setBody(byte[] body) {
      this.body = body == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(body, body.length));
      return this;
    }

    public InvokeAPI_args setBody(ByteBuffer body) {
      this.body = org.apache.thrift.TBaseHelper.copyBinary(body);
      return this;
    }

    public void unsetBody() {
      this.body = null;
    }

    /** Returns true if field body is set (has been assigned a value) and false otherwise */
    public boolean isSetBody() {
      return this.body != null;
    }

    public void setBodyIsSet(boolean value) {
      if (!value) {
        this.body = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case API_PATH:
        if (value == null) {
          unsetApi_path();
        } else {
          setApi_path((String)value);
        }
        break;

      case METHOD:
        if (value == null) {
          unsetMethod();
        } else {
          setMethod((String)value);
        }
        break;

      case ARG:
        if (value == null) {
          unsetArg();
        } else {
          setArg((Map<String,String>)value);
        }
        break;

      case HEADERS:
        if (value == null) {
          unsetHeaders();
        } else {
          setHeaders((Map<String,String>)value);
        }
        break;

      case BODY:
        if (value == null) {
          unsetBody();
        } else {
          setBody((ByteBuffer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case API_PATH:
        return getApi_path();

      case METHOD:
        return getMethod();

      case ARG:
        return getArg();

      case HEADERS:
        return getHeaders();

      case BODY:
        return getBody();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case API_PATH:
        return isSetApi_path();
      case METHOD:
        return isSetMethod();
      case ARG:
        return isSetArg();
      case HEADERS:
        return isSetHeaders();
      case BODY:
        return isSetBody();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof InvokeAPI_args)
        return this.equals((InvokeAPI_args)that);
      return false;
    }

    public boolean equals(InvokeAPI_args that) {
      if (that == null)
        return false;

      boolean this_present_api_path = true && this.isSetApi_path();
      boolean that_present_api_path = true && that.isSetApi_path();
      if (this_present_api_path || that_present_api_path) {
        if (!(this_present_api_path && that_present_api_path))
          return false;
        if (!this.api_path.equals(that.api_path))
          return false;
      }

      boolean this_present_method = true && this.isSetMethod();
      boolean that_present_method = true && that.isSetMethod();
      if (this_present_method || that_present_method) {
        if (!(this_present_method && that_present_method))
          return false;
        if (!this.method.equals(that.method))
          return false;
      }

      boolean this_present_arg = true && this.isSetArg();
      boolean that_present_arg = true && that.isSetArg();
      if (this_present_arg || that_present_arg) {
        if (!(this_present_arg && that_present_arg))
          return false;
        if (!this.arg.equals(that.arg))
          return false;
      }

      boolean this_present_headers = true && this.isSetHeaders();
      boolean that_present_headers = true && that.isSetHeaders();
      if (this_present_headers || that_present_headers) {
        if (!(this_present_headers && that_present_headers))
          return false;
        if (!this.headers.equals(that.headers))
          return false;
      }

      boolean this_present_body = true && this.isSetBody();
      boolean that_present_body = true && that.isSetBody();
      if (this_present_body || that_present_body) {
        if (!(this_present_body && that_present_body))
          return false;
        if (!this.body.equals(that.body))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_api_path = true && (isSetApi_path());
      list.add(present_api_path);
      if (present_api_path)
        list.add(api_path);

      boolean present_method = true && (isSetMethod());
      list.add(present_method);
      if (present_method)
        list.add(method);

      boolean present_arg = true && (isSetArg());
      list.add(present_arg);
      if (present_arg)
        list.add(arg);

      boolean present_headers = true && (isSetHeaders());
      list.add(present_headers);
      if (present_headers)
        list.add(headers);

      boolean present_body = true && (isSetBody());
      list.add(present_body);
      if (present_body)
        list.add(body);

      return list.hashCode();
    }

    @Override
    public int compareTo(InvokeAPI_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetApi_path()).compareTo(other.isSetApi_path());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApi_path()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.api_path, other.api_path);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMethod()).compareTo(other.isSetMethod());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMethod()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.method, other.method);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetArg()).compareTo(other.isSetArg());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetArg()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.arg, other.arg);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetHeaders()).compareTo(other.isSetHeaders());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHeaders()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.headers, other.headers);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBody()).compareTo(other.isSetBody());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBody()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.body, other.body);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("InvokeAPI_args(");
      boolean first = true;

      sb.append("api_path:");
      if (this.api_path == null) {
        sb.append("null");
      } else {
        sb.append(this.api_path);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("method:");
      if (this.method == null) {
        sb.append("null");
      } else {
        sb.append(this.method);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("arg:");
      if (this.arg == null) {
        sb.append("null");
      } else {
        sb.append(this.arg);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("headers:");
      if (this.headers == null) {
        sb.append("null");
      } else {
        sb.append(this.headers);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("body:");
      if (this.body == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.body, sb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class InvokeAPI_argsStandardSchemeFactory implements SchemeFactory {
      public InvokeAPI_argsStandardScheme getScheme() {
        return new InvokeAPI_argsStandardScheme();
      }
    }

    private static class InvokeAPI_argsStandardScheme extends StandardScheme<InvokeAPI_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, InvokeAPI_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // API_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.api_path = iprot.readString();
                struct.setApi_pathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // METHOD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.method = iprot.readString();
                struct.setMethodIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ARG
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map10 = iprot.readMapBegin();
                  struct.arg = new HashMap<String,String>(2*_map10.size);
                  String _key11;
                  String _val12;
                  for (int _i13 = 0; _i13 < _map10.size; ++_i13)
                  {
                    _key11 = iprot.readString();
                    _val12 = iprot.readString();
                    struct.arg.put(_key11, _val12);
                  }
                  iprot.readMapEnd();
                }
                struct.setArgIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // HEADERS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map14 = iprot.readMapBegin();
                  struct.headers = new HashMap<String,String>(2*_map14.size);
                  String _key15;
                  String _val16;
                  for (int _i17 = 0; _i17 < _map14.size; ++_i17)
                  {
                    _key15 = iprot.readString();
                    _val16 = iprot.readString();
                    struct.headers.put(_key15, _val16);
                  }
                  iprot.readMapEnd();
                }
                struct.setHeadersIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // BODY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.body = iprot.readBinary();
                struct.setBodyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, InvokeAPI_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.api_path != null) {
          oprot.writeFieldBegin(API_PATH_FIELD_DESC);
          oprot.writeString(struct.api_path);
          oprot.writeFieldEnd();
        }
        if (struct.method != null) {
          oprot.writeFieldBegin(METHOD_FIELD_DESC);
          oprot.writeString(struct.method);
          oprot.writeFieldEnd();
        }
        if (struct.arg != null) {
          oprot.writeFieldBegin(ARG_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.arg.size()));
            for (Map.Entry<String, String> _iter18 : struct.arg.entrySet())
            {
              oprot.writeString(_iter18.getKey());
              oprot.writeString(_iter18.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.headers != null) {
          oprot.writeFieldBegin(HEADERS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.headers.size()));
            for (Map.Entry<String, String> _iter19 : struct.headers.entrySet())
            {
              oprot.writeString(_iter19.getKey());
              oprot.writeString(_iter19.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.body != null) {
          oprot.writeFieldBegin(BODY_FIELD_DESC);
          oprot.writeBinary(struct.body);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class InvokeAPI_argsTupleSchemeFactory implements SchemeFactory {
      public InvokeAPI_argsTupleScheme getScheme() {
        return new InvokeAPI_argsTupleScheme();
      }
    }

    private static class InvokeAPI_argsTupleScheme extends TupleScheme<InvokeAPI_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, InvokeAPI_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetApi_path()) {
          optionals.set(0);
        }
        if (struct.isSetMethod()) {
          optionals.set(1);
        }
        if (struct.isSetArg()) {
          optionals.set(2);
        }
        if (struct.isSetHeaders()) {
          optionals.set(3);
        }
        if (struct.isSetBody()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetApi_path()) {
          oprot.writeString(struct.api_path);
        }
        if (struct.isSetMethod()) {
          oprot.writeString(struct.method);
        }
        if (struct.isSetArg()) {
          {
            oprot.writeI32(struct.arg.size());
            for (Map.Entry<String, String> _iter20 : struct.arg.entrySet())
            {
              oprot.writeString(_iter20.getKey());
              oprot.writeString(_iter20.getValue());
            }
          }
        }
        if (struct.isSetHeaders()) {
          {
            oprot.writeI32(struct.headers.size());
            for (Map.Entry<String, String> _iter21 : struct.headers.entrySet())
            {
              oprot.writeString(_iter21.getKey());
              oprot.writeString(_iter21.getValue());
            }
          }
        }
        if (struct.isSetBody()) {
          oprot.writeBinary(struct.body);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, InvokeAPI_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.api_path = iprot.readString();
          struct.setApi_pathIsSet(true);
        }
        if (incoming.get(1)) {
          struct.method = iprot.readString();
          struct.setMethodIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TMap _map22 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.arg = new HashMap<String,String>(2*_map22.size);
            String _key23;
            String _val24;
            for (int _i25 = 0; _i25 < _map22.size; ++_i25)
            {
              _key23 = iprot.readString();
              _val24 = iprot.readString();
              struct.arg.put(_key23, _val24);
            }
          }
          struct.setArgIsSet(true);
        }
        if (incoming.get(3)) {
          {
            org.apache.thrift.protocol.TMap _map26 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.headers = new HashMap<String,String>(2*_map26.size);
            String _key27;
            String _val28;
            for (int _i29 = 0; _i29 < _map26.size; ++_i29)
            {
              _key27 = iprot.readString();
              _val28 = iprot.readString();
              struct.headers.put(_key27, _val28);
            }
          }
          struct.setHeadersIsSet(true);
        }
        if (incoming.get(4)) {
          struct.body = iprot.readBinary();
          struct.setBodyIsSet(true);
        }
      }
    }

  }

  public static class InvokeAPI_result implements org.apache.thrift.TBase<InvokeAPI_result, InvokeAPI_result._Fields>, java.io.Serializable, Cloneable, Comparable<InvokeAPI_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("InvokeAPI_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new InvokeAPI_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new InvokeAPI_resultTupleSchemeFactory());
    }

    public Response success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Response.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(InvokeAPI_result.class, metaDataMap);
    }

    public InvokeAPI_result() {
    }

    public InvokeAPI_result(
      Response success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public InvokeAPI_result(InvokeAPI_result other) {
      if (other.isSetSuccess()) {
        this.success = new Response(other.success);
      }
    }

    public InvokeAPI_result deepCopy() {
      return new InvokeAPI_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Response getSuccess() {
      return this.success;
    }

    public InvokeAPI_result setSuccess(Response success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Response)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof InvokeAPI_result)
        return this.equals((InvokeAPI_result)that);
      return false;
    }

    public boolean equals(InvokeAPI_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(InvokeAPI_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("InvokeAPI_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class InvokeAPI_resultStandardSchemeFactory implements SchemeFactory {
      public InvokeAPI_resultStandardScheme getScheme() {
        return new InvokeAPI_resultStandardScheme();
      }
    }

    private static class InvokeAPI_resultStandardScheme extends StandardScheme<InvokeAPI_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, InvokeAPI_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Response();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, InvokeAPI_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class InvokeAPI_resultTupleSchemeFactory implements SchemeFactory {
      public InvokeAPI_resultTupleScheme getScheme() {
        return new InvokeAPI_resultTupleScheme();
      }
    }

    private static class InvokeAPI_resultTupleScheme extends TupleScheme<InvokeAPI_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, InvokeAPI_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, InvokeAPI_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Response();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}